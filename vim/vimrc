
""" ordering copied from tpope 

"" runtime path management

let g:pathogen_blacklist = []
if v:version < '703'
    call add(g:pathogen_blacklist, 'bufexplorer')
endif

source ~/common/vim/bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

"" vi/vim options

set foldmethod=manual

"" behaviour

set nocompatible    " more features
set backspace=indent,eol,start " bs over everything in insert
set modeline        " honour vim: lines in files
set hidden          " hide abandoned buffers; don't close
set history=50      " keep 50 lines of command line history
set ignorecase      " ignore case in search pattern
set incsearch       " do incremental searching
set laststatus=2    " always show a statusline
"set nobackup        " don't make a backup file
"set number          " line numbers
set ruler           " show the cursor position all the time
set shortmess+=I    " no intro on startup
"set showbreak=+\    " string representing wrapped lines 
set showcmd         " display incomplete commands
set showmatch       " show matching {[()]}
set smartcase       " ignorecase + except if the pattern contains uppercase
"set scrolloff=999     " lines of context around cursor when scrolling
set wildmenu        " fancy :b tab-complete
"set statusline=%<%f\%h%m%r%=%-20.(line=%l\ \ col=%c%V\ \ totlin=%L%)\ \ \%h%m%r%=%-40(bytval=0x%B,%n%Y%)\%P
set splitbelow	" split below instead of above
set splitright	" split right instead of left
"set updatetime=1500  " delay when writing to swap

"set nowrap  " scroll right instead
" save window size/position in session
set sessionoptions+=resize,winpos

"" put annoying files elsewhere
set dir=~/.local/share/vim/swap//,~//
" if 'backup' is on
set backupdir=~/.local/share/vim/backup,~//
" set 'undofile' for persistent undo
"set undodir=~/.local/share/vim/undo,~//

" stop netrw pooping in my home
let g:netrw_dirhistmax = 0

"set viminfo+="/0"      " forget search history
set viminfo=""
"set viminfofile="NONE"



"" default formatting

set autoindent      " use preceding line's indent
set expandtab       " expand tabs to spaces (use :retab to do a whole buffer)
set shiftwidth=2    " number of spaces for (auto)indent and <<, >>
set softtabstop=2   " number of spaces that count as a tab
set tabstop=2       " number of spaces a tab char displays as
set shiftround      " <> round to multiples of shiftwidth
set smarttab        " use shiftwidth for tabs at start of line
"set cinkeys="0{,0},0),0#,!^F,o,O,e"

"" special options

"" lilypond
filetype off
set runtimepath+=~/.local/lilypond/usr/share/lilypond/current/vim



"" plugin settings

" bufexplorer
let g:bufExplorerShowRelativePath=1
let g:bufExplorerSortBy='fullpath'
let g:bufExplorerSplitOutPathName=0
let g:bufExplorerShowUnlisted=0

" python
let python_highlight_all = 1
let python_slow_sync = 0
"let python_version_2 = 1
"let python_slow_sync = 1
"let g:pymode_python = 'python3'


"" commands


"" mappings

inoremap kj <esc>
"vnoremap kj <esc>
"inoremap <esc> <nop>
"vnoremap <esc> <nop>

nnoremap <leader>t2 :set ts=2 sts=2 sw=2<CR>
nnoremap <leader>t3 :set ts=3 sts=3 sw=3<CR>
nnoremap <leader>t4 :set ts=4 sts=4 sw=4<CR>
nnoremap <leader>t8 :set ts=8 sts=8 sw=8<CR>
nnoremap <space> :ToggleBufExplorer<CR>
nnoremap <s-tab> :bu<space>
let g:bufmru_switchkey="<tab>"


"" autocommands

if has("autocmd")
    filetype plugin indent on
    autocmd filetype text setlocal tw=72
    autocmd bufnewfile,bufread *.mako set filetype=mako
    autocmd bufread *.py~base.* set filetype=python
    autocmd bufread *.py~other.* set filetype=python
endif


"" visual

if has("gui_running")
    "colo vividchalk
    colo wombat
    set guioptions=a
    " set guifont=dejavu\ sans\ mono\ 9
else
    " Access colors present in 256 colorspace
    let base16colorspace=256
endif

if (&t_Co > 2 || has("gui_running")) && has("syntax")
    set background=dark
    "colo base16-material
    " syntax colors
    syntax on
endif


"" local

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

